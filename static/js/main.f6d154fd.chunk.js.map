{"version":3,"sources":["utils/validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.png","api/chat-api.ts","redux/chat-reducer.ts","components/Users/users.module.css","api/api.ts","reportWebVitals.js","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/sidebar-reducer.ts","api/users-api.ts","utils/object.helpers.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/LoginPage.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","props","src","preloader","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChanel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","module","exports","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","News","Music","Settings","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","updateObjectInArray","items","itemId","objPropName","newObjProps","u","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","paginatorButton","onClick","cn","selectedPage","pageNumber","c","User","user","to","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","Users","useDispatch","history","useHistory","queryString","require","useEffect","parsed","location","search","substr","actualPage","actualFilter","Number","query","pathname","stringify","UsersPage","pageTitle","LoginReduxForm","reduxForm","handleSubmit","createField","Input","undefined","style","formSummaryError","LoginPage","CaptchaIsRequired","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","StrictMode","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.f6d154fd.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";   \r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;   \r\n}","export default __webpack_public_path__ + \"static/media/preloader.385f97b7.svg\";","import React from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\ntype PropsType = {}\r\n\r\nlet Preloader: React.FC = (props) => {\r\nreturn  <div>\r\n    <img src={preloader} /> \r\n   </div>\r\n}\r\n\r\nexport default Preloader;","import { PhotosType, ProfileType } from \"../types/types\";\r\nimport { instance, APIResponseType } from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n} \r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n}","import { profileAPI } from '../api/profile-api';\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport { PostType, PhotosType, ProfileType } from '../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Did you have a nice day?', likesCount: 14 },\r\n    { id: 2, message: 'My first post', likesCount: 29 }\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/PROFILE/ADD-POST': {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 2\r\n      };\r\n      return {\r\n        ...state,\r\n        posts:[...state.posts, newPost]\r\n      };\r\n    }\r\n    case 'SN/PROFILE/SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status:action.status\r\n      }\r\n    }\r\n    case 'SN/PROFILE/SET_USER_PROFILE': {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n    case 'SN/PROFILE/DELETE_POST': {\r\n      return {\r\n        ...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n    }\r\n\r\n    case 'SN/PROFILE/SAVE_PHOTO_SUCCESS': {\r\n      return {\r\n        ...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string) => ({ type: 'SN/PROFILE/ADD-POST', newPostText }as const ),\r\n  setUserProfile: (profile: ProfileType) => ({ type: 'SN/PROFILE/SET_USER_PROFILE', profile }as const ),\r\n  setStatus: (status: string) => ({ type: 'SN/PROFILE/SET_STATUS', status }as const ),\r\n  deletePost: (postId: number) => ({ type: 'SN/PROFILE/DELETE_POST', postId }as const ),\r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos }as const )\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n  let data = await profileAPI.getProfile(userId);\r\n    dispatch (actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n  let data = await profileAPI.getStatus(userId); \r\n    dispatch (actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n try {\r\n    let data = await profileAPI.updateStatus(status); \r\n    if (data.resultCode === 0){\r\n    dispatch (actions.setStatus(status));\r\n  }\r\n} catch (error) {\r\n\r\n}\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n  let data = await profileAPI.savePhoto(file); \r\n    if (data.resultCode === 0){\r\n    dispatch (actions.savePhotoSuccess(data.data.photos));\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId;\r\n  const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0){\r\n      if (userId != null) {\r\n    dispatch (getUserProfile(userId));\r\n      } else {\r\n        throw new Error (\"userId can't be null\")\r\n      }\r\n  } else {\r\n    dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]  }));\r\n    return Promise.reject(data.messages[0]);\r\n  }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState \r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>","import { InferActionsTypes } from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\ntype MessageType = {\r\n  id: number\r\n  message: string\r\n}\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: 'Dima' },\r\n    { id: 2, name: 'Sveta' },\r\n    { id: 3, name: 'Sasha' },\r\n    { id: 4, name: 'Olga' },\r\n    { id: 5, name: 'Tom' },\r\n    { id: 6, name: 'Alex' }\r\n  ] as Array<DialogType>,\r\n\r\n  messages: [\r\n    { id: 1, message: 'Hey' },\r\n    { id: 2, message: 'How are you?' },\r\n    { id: 3, message: 'Did you have a nice day?' }\r\n  ] as Array<MessageType>\r\n\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n  switch (action.type) {\r\n    case 'SN/DIALOGS/SEND-MESSAGE':\r\n      let body = action.newMessageBody;\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 4, message: body }]\r\n      };\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n sendMessage: (newMessageBody: string) => ({ type: 'SN/DIALOGS/SEND-MESSAGE', newMessageBody } as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","export default __webpack_public_path__ + \"static/media/user.0a4ae0bf.png\";","\r\n\r\nconst subscribers = {\r\n    'messages-received': [] as NewMessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n} \r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChanel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\n\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s=>s(status))\r\n} \r\n\r\nfunction createChanel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws?.addEventListener('close', closeHandler)\r\n    ws?.addEventListener('message', messageHandler)\r\n    ws?.addEventListener('open', openHandler)\r\n    ws?.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\ncreateChanel()\r\n    },\r\n    stop() {\r\n    subscribers['messages-received'] = []\r\n    subscribers['status-changed'] = []\r\n    cleanUp()\r\n    ws?.close()    \r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: NewMessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        //@ts-ignore\r\n    subscribers[eventName].push(callback)\r\n    return ()=> {\r\n        //@ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: NewMessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        //@ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype NewMessagesReceivedSubscriberType = (messages: ChatMessageAPIType[])=>void\r\ntype StatusChangedSubscriberType = (status: StatusType)=>void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error'","import { FormAction } from 'redux-form'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../api/chat-api'\r\nimport { Dispatch } from 'redux'\r\nimport {v1} from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/chat/MESSAGES_RECEIVED':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))]\r\n        .filter((m, index, array)=> index >= array.length - 100)\r\n      }\r\n      case 'SN/chat/STATUS_CHANGED':\r\n        return {\r\n          ...state,\r\n          status: action.payload.status\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n    type: 'SN/chat/MESSAGES_RECEIVED', payload: { messages }\r\n  } as const ),\r\n  statusChanged: (status: StatusType) => ({\r\n    type: 'SN/chat/STATUS_CHANGED', payload: { status }\r\n  } as const )\r\n} \r\n\r\nlet _newMessageHandler:((messages: ChatMessageAPIType[]) => void) | null = null \r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n  if(_newMessageHandler === null) \r\n  _newMessageHandler = (messages) => {\r\n  dispatch(actions.messagesReceived(messages)) \r\n}\r\nreturn _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler:((status: StatusType) => void) | null = null \r\nconst statusHandlerCreator = (dispatch: Dispatch) => {\r\n  if(_statusChangedHandler === null) \r\n  _statusChangedHandler = (status) => {\r\n  dispatch(actions.statusChanged(status)) \r\n}\r\nreturn _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.start()\r\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.subscribe('status-changed', statusHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.unsubscribe('status-changed', newMessageHandlerCreator(dispatch))\r\n  chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n  chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__2B4yM\",\"followUnfollowButton\":\"users_followUnfollowButton__3ZSk-\"};","import axios from 'axios'\r\nimport { UserType } from '../types/types'\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': 'c068030d-a8e8-4515-bf10-1c9a17242b72'\r\n  }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: Array<UserType>\r\n  totalCount: number\r\n  error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\nreturn (\r\n    <div>\r\n        News\r\n    </div>\r\n)\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\nreturn (\r\n    <div>\r\n        Music\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\nreturn (\r\n    <div>\r\n        Settings\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Settings;","import { instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum } from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n     id: number\r\n     email: string\r\n    login: string \r\n}\r\n\r\ntype LoginResponseDataType = {\r\n     userId: number \r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n        .then( res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}","import { instance } from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n}","import { ResultCodesEnum } from '../api/api'\r\nimport { ResultCodeForCaptchaEnum } from '../api/api'\r\nimport { authAPI } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\nimport { FormAction, stopSubmit } from 'redux-form'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\n\r\nlet initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/auth/SET_USER_DATA':\r\n    case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'SN/auth/SET_USER_DATA', payload: { userId, email, login, isAuth }\r\n  } as const ),\r\n  getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n    type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n  } as const )\r\n} \r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  let meData = await authAPI.me()\r\n\r\n  if (meData.resultCode === ResultCodesEnum.Success) {\r\n    let { id, login, email } = meData.data\r\n    dispatch(actions.setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkType => async (dispatch) => {\r\n  let data = await authAPI.login(email, password, rememberMe, captcha)\r\n  if (data.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    }\r\n    let message = data.messages.length > 0\r\n        ? data.messages[0]\r\n        : 'Some error';\r\n    dispatch(stopSubmit('login', { _error: message }));\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  const captchaUrl = data.url;\r\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.logout();\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import { InferActionsTypes } from './redux-store'\r\nimport { getAuthUserData } from './auth-reducer'\r\n\r\nlet initialState = {\r\n  initialized: false\r\n};\r\n\r\nexport type InitialStateType = typeof initialState \r\nexport type ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n  switch (action.type) {\r\n    case 'SN/APP/INITIALIZED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  initializedSuccess: () => ({ type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n let promise = dispatch(getAuthUserData());\r\n\r\n Promise.all([promise]) \r\n .then(() => {\r\n  dispatch(actions.initializedSuccess());\r\n });\r\n \r\n}\r\n\r\nexport default appReducer;","let initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import { GetItemsType, instance, APIResponseType } from \"./api\"; \r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '':`&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n\r\nreturn items.map((u: any) => {\r\n    if (u[objPropName] === itemId) {\r\n      return { ...u, ...newObjProps }\r\n    }\r\n    return u\r\n  })\r\n}\r\n","import { usersAPI } from '../api/users-api'\r\nimport { UserType } from '../types/types'\r\nimport { updateObjectInArray } from '../utils/object.helpers'\r\nimport { InferActionsTypes, BaseThunkType } from './redux-store'\r\nimport { Dispatch } from 'redux'\r\nimport { APIResponseType} from '../api/api'\r\n\r\n\r\nlet initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [] as Array<number>,\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean \r\n  }\r\n}\r\n\r\nconst usersReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes): InitialState => {\r\n  switch (action.type) {\r\n    case 'SN/USERS/FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n      }\r\n\r\n    case 'SN/USERS/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', {followed: false\r\n})\r\n      }\r\n\r\n    case 'SN/USERS/SET_USERS': {\r\n      return { ...state, users: action.users }\r\n    }\r\n    case 'SN/USERS/SET_CURRENT_PAGE': {\r\n      return { ...state, currentPage: action.currentPage }\r\n    }\r\n    case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n      return { ...state, totalUsersCount: action.count }\r\n    }\r\n\r\n    case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n      return { ...state, isFetching: action.isFetching }\r\n    }\r\n    case 'SN/USERS/SET_FILTER': {\r\n      return { ...state, filter: action.payload}\r\n    }\r\n    case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter(id => id != action.userId)\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) => ({ type: 'SN/USERS/FOLLOW', userId } as const),\r\n  unfollowSuccess: (userId: number) => ({ type: 'SN/USERS/UNFOLLOW', userId } as const ),\r\n  setUsers: (users: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS', users } as const ),\r\n  setCurrentPage: (currentPage: number) => ({ type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const ),\r\n  setFilter: (filter: FilterType) => ({ type: 'SN/USERS/SET_FILTER', payload: filter} as const ),\r\n  setTotalUsersCount: (totalUsersCount: number) => ({\r\n    type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n    count: totalUsersCount\r\n  } as const ),\r\n  toggleIsFetching: (isFetching: boolean) => ({\r\n    type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n    isFetching\r\n  } as const ),\r\n  toggleFollowingInProgress: (isFetching: boolean, userId: number) => ({\r\n    type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n    isFetching,\r\n    userId\r\n  } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    dispatch(actions.setCurrentPage(page))\r\n    dispatch(actions.setFilter(filter))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n\r\n    dispatch(actions.toggleIsFetching(false))\r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalUsersCount(data.totalCount))\r\n  }\r\n}\r\n\r\nconst _followUnfollowFlow = async (\r\n  dispatch: Dispatch<ActionsTypes>,\r\n  userId: number,\r\n  apiMethod: (userId: number) => Promise<APIResponseType>,\r\n  actionCreator: (userId: number) => ActionsTypes) => {\r\n  dispatch(actions.toggleFollowingInProgress(true, userId))\r\n  let response = await apiMethod(userId)\r\n\r\n  if (response.resultCode == 0) {\r\n    dispatch(actionCreator(userId))\r\n  }\r\n  dispatch(actions.toggleFollowingInProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId,\r\n      usersAPI.follow.bind(usersAPI),\r\n      actions.followSuccess\r\n    )\r\n  }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId,\r\n      usersAPI.unfollow.bind(usersAPI),\r\n      actions.unfollowSuccess\r\n    )\r\n  }\r\n}\r\nexport default usersReducer\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore, compose, Action } from 'redux'\r\nimport profileReducer from './profile-reducer'\r\nimport dialogsReducer from './dialogs-reducer'\r\nimport sidebarReducer from './sidebar-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './app-reducer'\r\nimport chatReducer from './chat-reducer'\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[])=> infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n)\r\n//@ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store\r\n","import React from \"react\";\r\n\r\nexport function withSuspense <WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>...loading</div>} >\r\n        <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, users => {\r\n  return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter\r\n}\r\n","import React, {useState} from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport s from './Paginator.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount/portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    \r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\nlet rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return  <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button  className={s.paginatorButton} onClick={ () => {setPortionNumber(portionNumber - 1)}}>PREV</button>}\r\n            {pages\r\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n            .map ((p) => {\r\n                return <span className={ cn ({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                key={p}\r\n                onClick={(c) => {\r\n                    onPageChanged(p);\r\n                }}>{p}</span>\r\n\r\n            })}\r\n            {portionCount > portionNumber &&\r\n            <button className={s.paginatorButton} onClick={()=> {setPortionNumber (portionNumber +1)}}>NEXT</button> }\r\n            \r\n        </div>\r\n\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from './users.module.css';\r\nimport s from './users.module.css';\r\nimport userPhoto from '../../../src/assets/images/user.png';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number> \r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto} />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                onClick={() => {unfollow(user.id) }}>Unfollow</button>\r\n\r\n\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                onClick={() => {follow(user.id) }}>Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'user.location.country'}</div>\r\n                        <div>{'user.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)\r\n        \r\n}\r\n\r\nexport default User;","import React from 'react'\r\nimport { Field, Form, Formik } from 'formik';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsersFilter } from '../../redux/users-selectors';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n  term: string\r\n  friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n  const filter = useSelector(getUsersFilter)\r\n\r\nconst submit = (values: FormType, {setSubmitting} : {setSubmitting : (isSubmitting: boolean) => void }) => {\r\nconst filter: FilterType = {\r\n  term: values.term,\r\n  friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n}\r\n\r\nprops.onFilterChanged(filter)\r\nsetSubmitting(false)\r\n}\r\n\r\nreturn <div>\r\n<Formik\r\n  enableReinitialize\r\n  initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n  validate={usersSearchFormValidate}\r\n  onSubmit={submit}\r\n>\r\n  {({ isSubmitting }) => (\r\n    <Form>\r\n      <Field type=\"text\" name=\"term\" />\r\n      <Field name=\"friend\" as='select'>\r\n        <option value=\"null\">All</option>\r\n        <option value=\"true\">Followed only</option>\r\n        <option value=\"false\">Unfollowed only</option>\r\n        </Field>\r\n      <button type=\"submit\" disabled={isSubmitting}>\r\n        Find\r\n      </button>\r\n    </Form>\r\n  )}\r\n</Formik>\r\n</div>\r\n})","import React, {FC, useEffect} from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, requestUsers} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const queryString = require('querystring');\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch(parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={unfollow}\r\n                                     follow={follow}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\nimport { Users } from './Users'\r\n\r\ntype UsersPageropsType = {\r\n  pageTitle: string\r\n}\r\nexport const UsersPage: React.FC<UsersPageropsType> = (props) => {\r\n\r\nconst isFetching = useSelector(getIsFetching)\r\n\r\n  return <>\r\n  <h2>{props.pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users/>\r\n    </>\r\n}\r\n\r\n","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { Input, createField, GetStringKeys } from '../common/FormsControls/FormsControls';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport style from './../common/FormsControls/FormsControls.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, { type: \"password\" })}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, { type: \"checkbox\" }, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(LoginForm)\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n  }\r\n  \r\nexport  type LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = (props) => {\r\n\r\nconst captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\nconst isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\nconst dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n}\r\n","import { AppStateType } from './redux-store'\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n  return state.auth.isAuth\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n  return state.auth.login\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Avatar, Button, Col, Layout, Menu, Row } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { selectIsAuth, selectCurrentUserLogin } from '../../redux/auth-selectors'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nexport type MapPropsType = {\r\n}\r\n\r\nexport const Header: React.FC<MapPropsType> = (props) => {\r\n\r\n  const isAuth = useSelector(selectIsAuth)\r\n  const login = useSelector(selectCurrentUserLogin)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const logoutCallback = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  const { Header } = Layout;\r\n\r\n  return <Header className=\"header\">\r\n    <Row>\r\n      <Col span={18}><Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n        <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n      </Menu></Col>\r\n\r\n\r\n      {isAuth\r\n        ?<><Col span={1}>\r\n          <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n        </Col>\r\n        <Col span={5}>\r\n          <Button onClick={logoutCallback}> Log out </Button>\r\n        </Col>\r\n        </> \r\n        : <Col span={6}>\r\n          <Button>  \r\n          <Link to={'/login'}>Login</Link> </Button>\r\n          </Col>}\r\n\r\n    </Row>\r\n    );\r\n  </Header>\r\n}\r\n\r\n\r\n","import React, { Component, Suspense } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport { Route, withRouter, HashRouter, Switch, Link } from \"react-router-dom\";\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/app-reducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport store, { AppStateType } from './redux/redux-store';\nimport { withSuspense } from './hoc/withSuspense';\nimport { UsersPage } from './components/Users/UsersContainer';\nimport { LoginPage } from './components/Login/LoginPage';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport { Header } from './components/Header/Header'\n\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert(\"Some error occured\");\n  }\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n\n    return (\n\n      <Layout>\n        <Header />\n        <Content style={{ padding: '0 50px' }}>\n          <Breadcrumb style={{ margin: '16px 0' }}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>List</Breadcrumb.Item>\n            <Breadcrumb.Item>App</Breadcrumb.Item>\n          </Breadcrumb>\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n            <Sider className=\"site-layout-background\" width={200}>\n              <Menu\n                mode=\"inline\"\n                defaultSelectedKeys={['1']}\n                /*defaultOpenKeys={['sub1']}*/\n                style={{ height: '100%' }}\n              >\n\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My profile\">\n                  <Menu.Item key=\"1\"><Link to=\"/profile\"> Profile </Link></Menu.Item>\n                  <Menu.Item key=\"2\"><Link to=\"/dialogs\"> Messages </Link></Menu.Item>\n                  <Menu.Item key=\"3\">option3</Menu.Item>\n                  <Menu.Item key=\"4\">option4</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n                  <Menu.Item key=\"5\"><Link to=\"/developers\"> Developers </Link></Menu.Item>\n                  <Menu.Item key=\"6\">option6</Menu.Item>\n                  <Menu.Item key=\"7\">option7</Menu.Item>\n                  <Menu.Item key=\"8\">option8</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n                  <Menu.Item key=\"9\"><Link to=\"/chat\"> Chat </Link></Menu.Item>\n                  <Menu.Item key=\"10\">option10</Menu.Item>\n                  <Menu.Item key=\"11\">option11</Menu.Item>\n                  <Menu.Item key=\"12\">option12</Menu.Item>\n                </SubMenu>\n              </Menu>\n            </Sider>\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\n\n              <Switch>\n\n                <Route path='/dialogs'\n                  render={() => <SuspendedDialogs />} />\n\n                <Route path='/profile:userId?'\n                  render={() => <SuspendedProfile />} />\n\n                <Route path='/news'\n                  render={() => <News />} />\n\n                <Route path='/music'\n                  render={() => <Music />} />\n\n                <Route path='/settings'\n                  render={() => <Settings />} />\n\n                <Route path='/developers'\n                  render={() => <UsersPage pageTitle={\"Samurajs\"} />} />\n\n                <Route path='/login'\n                  render={() => <LoginPage />} />\n\n                <Route path='/chat'\n                  render={() => <SuspendedChatPage/>} />\n\n                <Route path='*'\n                  render={() => <div>404 NOT FOUND </div>} />\n\n              </Switch>\n\n            </Content>\n          </Layout>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Samuraj Social Network 2022</Footer>\n      </Layout>\n\n\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App);\n\nconst SamuraiJSApp: React.FC = () => {\n  return <HashRouter >\n    <Provider store={store}>\n      <React.StrictMode>\n        <AppContainer />\n\n      </React.StrictMode>\n    </Provider>\n  </HashRouter>\n}\n\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from './App';\n\n\n  ReactDOM.render( \n   <SamuraiJSApp />, document.getElementById('root'));\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react'\r\nimport styles from './FormsControls.module.css'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport { FieldValidatorType } from '../../../utils/validators/validators'\r\nimport { WrappedFieldMetaProps } from 'redux-form/lib/Field'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    }\r\n\r\nconst FormControl: React.FC<FormControlPropsType>  = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>\r\n      {children}\r\n      </div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return  <FormControl {...props}> <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return  <FormControl {...props}> <input {...input} {...restProps} />\r\n    </FormControl>\r\n  \r\n}\r\n\r\nexport function createField<FormKeysType extends string> (\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  props = {},\r\n  text = \"\" ) {\r\n  return <div>\r\n    <Field placeholder={placeholder}\r\n      name={name}\r\n      validate={validators}\r\n      component={component}\r\n      {...props}\r\n      /> {text}\r\n  </div>\r\n  }\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1YgH8\",\"pageNumber\":\"Paginator_pageNumber__2J6yr\",\"selectedPage\":\"Paginator_selectedPage__13Ii0\",\"paginatorButton\":\"Paginator_paginatorButton__2kyq9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__lI7Lw\",\"error\":\"FormsControls_error__1ih9r\",\"formSummaryError\":\"FormsControls_formSummaryError__27wI-\"};"],"sourceRoot":""}