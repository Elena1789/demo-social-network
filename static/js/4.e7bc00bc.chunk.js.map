{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oGCgBnKC,EARyB,SAACC,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCFnBC,EAJsB,SAACT,GAClC,OAAO,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMU,W,0BCDvCC,EAAcC,YAAiB,IAgBtBC,cAAoC,CAAEC,KAAM,2BAA5CD,EAXT,SAACb,GACC,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,gCACKC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,KADhH,OAIA,8BAAK,kDCqBNC,EAxBsB,SAACpB,GAElC,IAAIqB,EAAQrB,EAAMsB,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBN,GAAIwB,EAAExB,IAAZwB,EAAExB,OAC1EyB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASnB,QAASmB,EAAEnB,SAAcmB,EAAE3B,OAMnF,OACI,sBAAKC,UAAWC,IAAEoB,QAAlB,UACI,qBAAKrB,UAAWC,IAAE0B,aAAlB,SACKP,IAEL,qBAAKpB,UAAWC,IAAEwB,SAAlB,SACI,8BAAMD,MAGV,cAAC,EAAD,CAAgBZ,SAbJ,SAACgB,GACjB/B,EAAMgC,YAAYD,EAAOE,uB,sCCjB7BC,EAA6B,SAACb,GAAD,MAA0B,CACzDc,OAAQd,EAAMe,KAAKD,S,YCONE,sBACXC,aAPkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBiB,ODG1B,SAA+BC,GAcpC,OAJqCF,YACnCJ,EAA4B,GADOI,EARkC,SAACtC,GACtE,IAAMmC,EAAyBnC,EAAzBmC,OAAWM,EAAjB,YAA+BzC,EAA/B,GAEA,OAAKmC,EAEE,cAACK,EAAD,eAAsBC,IAFT,cAAC,IAAD,CAAUlC,GAAG,gBCTtB8B,CAGbjB","file":"static/js/4.e7bc00bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1uWWG\",\"dialogsItems\":\"Dialogs_dialogsItems__2U-FF\",\"active\":\"Dialogs_active__1OEdN\",\"messages\":\"Dialogs_messages__2-tYI\",\"message\":\"Dialogs_message__36BkA\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import { Field, reduxForm } from 'redux-form';\r\nimport React from 'react';\r\nimport { createField, Textarea } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { NewMessageFormValuesType } from './Dialogs';\r\nimport { InjectedFormProps } from 'redux-form';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\nexport type NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)};\r\n\r\n                </div>\r\n                <div><button>Send</button></div>\r\n            </form>\r\n        )\r\n    }\r\nexport default reduxForm<NewMessageFormValuesType>({ form: \"dialog-add-message-form\" })(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport AddMessageForm from './AddMessageForm';\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n   dialogsPage: InitialStateType\r\n   sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n  }\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                \r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Dialogs;","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n  const  RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) =>{\r\n    let { isAuth, ...restProps } = props\r\n\r\n    if (!isAuth) return <Redirect to='/login' />\r\n\r\n    return <WrappedComponent {...restProps as WCP}/>\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n    mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}