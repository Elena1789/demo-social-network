{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAncorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"oKAYMA,EAAiB,WAEvB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU3D,OARJI,qBAAU,WAEN,OADAN,EAASO,eACF,WACPP,EAASQ,kBAEV,IAGQ,gCACS,UAAXN,GAAsB,8EACxB,qCACA,cAACO,EAAD,IACC,cAACC,EAAD,WAKFD,EAAyB,WAC3B,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAmBC,iBAAuB,MAChD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAV,qBAAU,WACa,IAAD,EAAdS,IACJ,UAAAH,EAAiBK,eAAjB,SAA0BC,eAAe,CAACC,SAAS,cAEpD,CAACR,IAEG,sBAAKS,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAfrC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAc,KAC1EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAK1B,QAIZuB,EAAqDI,IAAMC,MAAK,YAAkB,IAAfJ,EAAc,EAAdA,QAErE,OAAO,gCACH,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAAEuB,MAAO,UADtC,IACmD,4BAAIP,EAAQQ,WAClE,uBACCR,EAAQA,QACT,6BAIF1B,EAA+B,WACjC,MAA8BI,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBS,EAAhB,KACM7C,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OAAO,gCACH,8BACI,0BAAU4C,SAAU,SAACtB,GAAD,OAAOqB,EAAWrB,EAAEE,cAAcqB,QAAQA,MAAOX,MAEzE,8BACI,wBAAQY,SAAqB,UAAX9C,EAAoB+C,QAbnB,WAClBb,IAGLpC,EAASkD,YAAYd,IACrBS,EAAW,MAQP,wBAKGM,UAzFY,WACvB,OAAO,8BACH,cAACpD,EAAD","file":"static/js/5.5b99c58b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ChatMessageAPIType } from '../../api/chat-api'\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\nconst dispatch = useDispatch()\r\n\r\nconst status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\nuseEffect(() => {\r\n    dispatch(startMessagesListening())\r\n    return () => {\r\n    dispatch(stopMessagesListening())  \r\n    }\r\n}, [])\r\n       \r\n        \r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n       <>\r\n       <Messages />\r\n        <AddMessageForm />\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAncorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight)<300){\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        }else{\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (isAutoScroll) {\r\n        messagesAncorRef.current?.scrollIntoView({behavior:'smooth'})\r\n    }\r\n    }, [messages])\r\n\r\n    return <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n        <div ref={messagesAncorRef}></div>\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n\r\n    return <div>\r\n        <img src={message.photo} style={{ width: '30px' }} /> <b>{message.userName}</b>\r\n        <br />\r\n        {message.message}\r\n        <hr />\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}