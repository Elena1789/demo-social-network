{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","reduxForm","form","onSubmit","handleSubmit","createField","required","Input","MyPosts","postsElements","posts","reverse","map","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","type","Textarea","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.80d58809.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1NPyA\",\"mainPhoto\":\"ProfileInfo_mainPhoto__pr92G\",\"contact\":\"ProfileInfo_contact__3ibXJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__39dvc\",\"posts\":\"MyPosts_posts__2G8Sn\",\"addPostButton\":\"MyPosts_addPostButton__ohzml\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__y1Pue\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n  return (\r\n\r\n<div className = {s.item}>\r\n<img src = 'https://cdn-icons-png.flaticon.com/128/2922/2922688.png'/>\r\n{props.message}\r\n<div>\r\n<span>like</span> {props.likesCount}\r\n</div>\r\n</div>\r\n)\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport { required } from '../../../../utils/validators/validators';\r\nimport { Input, createField, GetStringKeys } from '../../../common/FormsControls/FormsControls';\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n  \r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType > & PropsType>= (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n          <div>\r\n          {createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Input)}\r\n          </div>\r\n          <div>\r\n            <button>Add post</button>\r\n          </div>\r\n        </form>\r\n    )\r\n  }\r\n\r\n  export default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'}) (AddPostForm)","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport AddPostForm, { AddPostFormValuesType }  from './AddPostForm/AddPostForm'\r\nimport {PostType} from '../../../types/types'\r\n\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType> \r\n}\r\n\r\nexport type DispatchPropsType = { \r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    \r\n    let postsElements =\r\n    [...props.posts]\r\n    .reverse()\r\n    .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  let onAddPost = (values:AddPostFormValuesType) => {\r\n    props.addPost(values.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostForm onSubmit={onAddPost}/>\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized;\r\n","import React from 'react';\r\nimport { actions } from '../../../redux/profile-reducer'\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts\r\n  } \r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n  addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\ntype PropsType = {\r\nstatus: string\r\nupdateStatus: (status:string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) =>{\r\n\r\nlet [editMode, setEditMode] = useState(false);\r\nlet [status, setStatus] = useState(props.status);\r\n\r\nuseEffect( () => {\r\nsetStatus(props.status);\r\n}, [props.status]);\r\n\r\nconst activateEditMode = () => {\r\n        setEditMode(true);\r\n}\r\n\r\nconst deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n}\r\n\r\nconst onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n    setStatus( e.currentTarget.value);\r\n}\r\n\r\n        return (\r\n            <div>\r\n                { !editMode && \r\n                    <div>\r\n                        <b>status:</b><span onDoubleClick={activateEditMode}>{ props.status || \"-----\"}</span>\r\n                    </div>\r\n                }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} \r\n                        onBlur={deactivateEditMode}\r\n                         autoFocus={true}\r\n                         value={status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport { reduxForm, InjectedFormProps } from 'redux-form';\r\nimport s from './ProfileInfo.module.css'\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\nimport {createField, GetStringKeys, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { ProfileType } from '../../../types/types'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n    <div><button>save</button></div>\r\n    {error && <div className={style.formSummaryError}>\r\n{error}\r\n        </div>\r\n        }\r\n\r\n    <div>\r\n      <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n      </div>\r\n      <div>\r\n      <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n      </div>\r\n      \r\n      <div>\r\n      <b>My professional skills</b>: \r\n      {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n      </div>\r\n      \r\n   \r\n      <div>\r\n      <b>About me:</b> \r\n      {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n      </div>\r\n  \r\n      <div>\r\n      <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n        return  <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n        </div>\r\n      }) }\r\n      </div>\r\n    </form>\r\n  }\r\n\r\n  const ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\n  export default ProfileDataFormReduxForm;","import React, { useState, ChangeEvent } from 'react'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport { ContactsType, ProfileType } from '../../../types/types'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false)\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n      saveProfile(formData).then(\r\n        ()=> {\r\n          setEditMode(false);\r\n        }\r\n      );\r\n   \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n        {isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n\r\n        {editMode ? \r\n          <ProfileDataForm\r\n            initialValues={profile}\r\n            profile={profile}\r\n            onSubmit={onSubmit}\r\n          />\r\n         : \r\n          <ProfileData\r\n            goToEditMode={() => {\r\n              setEditMode(true)\r\n            }}\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n          />\r\n        }\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n  return  <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>edit</button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      {profile.lookingForAJob && \r\n        <div>\r\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      }\r\n\r\n      <div>\r\n        <b>About me:</b> {profile.aboutMe}\r\n      </div>\r\n\r\n      <div>\r\n        <b>Contacts</b>: {\r\n        Object\r\n        .keys(profile.contacts)\r\n        .map(key => {\r\n          return <Contact key={key} contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n      </div>\r\n    </div>\r\n}  \r\n\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo\r\n","import React from 'react'\r\nimport { ProfileType } from '../../types/types'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        saveProfile={props.saveProfile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer';\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getStatus: (userId: number) => void\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n}\r\n  refreshProfile(){\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n\r\n    if (!userId) {\r\n      console.error (\"ID should exists in URI params or in state ('authorizedUserId')\")\r\n    } else {\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n\r\n    if (this.props.match.params.userId != prevProps.match.params.userId){\r\n    this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(): void {\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <Profile {...this.props} \r\n      isOwner={!this.props.match.params.userId}\r\n      profile={this.props.profile}\r\n      status={this.props.status}\r\n      updateStatus={this.props.updateStatus}\r\n      savePhoto={this.props.savePhoto} />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n"],"sourceRoot":""}